/*
 * DrawerMain.java
 *
 * @author Gill Windall
 *
 * A very simple drawing program.
 *
 * The UI for the class has been created using NetBeans GUI Builder.  If you
 * wish to edit the parts generated by the form editor you have two choices:
 * 1) Use a text editor to remove the "editor" comments that NetBeans uses
 * to identify the parts that should not be edited.  This is a one way trip. 
 * Once you have done this you won't be able to use the NetBeans GUI editor 
 * any more for this class
 * 2) Work out how to use the "Code" feature on the property editor in NetBeans
 * to customise the generated code.  You can do most things by use of properties 
 * such as "Pre-Init Code" and "Post-Init Code"
 */
package View;

import Model.Thread.RGBscrollbarPreviewThread;
import Model.Thread.AnimationThread;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
import Controller.JSONShapeReader;
import Controller.ShapeType;
import Controller.XMLShapeReader;
import Model.Thread.GameThread;
import java.awt.Color;
import javax.swing.JFrame;

public class DrawerMain extends JFrame {

    private static DrawingPanel drawingPanel; // the drawing panel
    public static boolean running = false; //By default, the programming isn't running

    /**
     * Initialise the components in the screen and then cast a reference to the
     * panel that will be drawn on so it can be used elsewhere.
     */
    public DrawerMain() {
        initComponents();
        drawingPanel = (DrawingPanel) panDrawingArea;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpShape = new javax.swing.ButtonGroup();
        panControls = new javax.swing.JPanel();
        panMoreControls = new javax.swing.JPanel();
        panShape = new javax.swing.JPanel();
        radLine = new javax.swing.JRadioButton();
        radOval = new javax.swing.JRadioButton();
        radTriangle = new javax.swing.JRadioButton();
        radQuadrilateral = new javax.swing.JRadioButton();
        panThickness = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtThickness = new javax.swing.JTextField();
        panRotate = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnLeft = new javax.swing.JButton();
        btnRight = new javax.swing.JButton();
        RunGame = new javax.swing.JButton();
        panButtons = new javax.swing.JPanel();
        btnClear = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        GravityButton = new javax.swing.JButton();
        panLoad = new javax.swing.JPanel();
        btnLoadXML = new javax.swing.JButton();
        btnLoadJSON = new javax.swing.JButton();
        ColourPreview = new creatingRGBColourPreview.RGBColourPreview();
        RGBscrollbar = new CreatingRGBscrollbar.RGBscrollbar();
        panDrawingArea = new DrawingPanel();
        GameModeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple Draw");

        panControls.setPreferredSize(new java.awt.Dimension(270, 300));
        panControls.setLayout(new java.awt.BorderLayout());

        panMoreControls.setLayout(new java.awt.GridLayout(5, 0));

        grpShape.add(radLine);
        radLine.setSelected(true);
        radLine.setText("Line");
        radLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radShapeActionPerformed(evt);
            }
        });
        panShape.add(radLine);

        grpShape.add(radOval);
        radOval.setText("Oval");
        radOval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radShapeActionPerformed(evt);
            }
        });
        panShape.add(radOval);

        grpShape.add(radTriangle);
        radTriangle.setText("Triangle");
        radTriangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radShapeActionPerformed(evt);
            }
        });
        panShape.add(radTriangle);

        grpShape.add(radQuadrilateral);
        radQuadrilateral.setText("4 sides");
        radQuadrilateral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radShapeActionPerformed(evt);
            }
        });
        panShape.add(radQuadrilateral);

        panMoreControls.add(panShape);

        panThickness.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("Thickness");
        panThickness.add(jLabel1);

        txtThickness.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtThickness.setText("5");
        txtThickness.setPreferredSize(new java.awt.Dimension(50, 20));
        txtThickness.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtThicknessFocusLost(evt);
            }
        });
        txtThickness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtThicknessActionPerformed(evt);
            }
        });
        txtThickness.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtThicknessKeyReleased(evt);
            }
        });
        panThickness.add(txtThickness);

        panMoreControls.add(panThickness);

        panRotate.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setText("Rotate");
        panRotate.add(jLabel2);

        btnLeft.setText("Left");
        btnLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeftActionPerformed(evt);
            }
        });
        panRotate.add(btnLeft);

        btnRight.setText("Right");
        btnRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRightActionPerformed(evt);
            }
        });
        panRotate.add(btnRight);

        RunGame.setText("Play Game");
        RunGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunGameActionPerformed(evt);
            }
        });
        panRotate.add(RunGame);

        panMoreControls.add(panRotate);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        panButtons.add(btnClear);

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        panButtons.add(btnReset);

        GravityButton.setText("Gravity");
        GravityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GravityButtonActionPerformed(evt);
            }
        });
        panButtons.add(GravityButton);

        panMoreControls.add(panButtons);

        btnLoadXML.setText("load XML");
        btnLoadXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadXMLActionPerformed(evt);
            }
        });
        panLoad.add(btnLoadXML);

        btnLoadJSON.setText("load JSON");
        btnLoadJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadJSONActionPerformed(evt);
            }
        });
        panLoad.add(btnLoadJSON);

        panMoreControls.add(panLoad);

        panControls.add(panMoreControls, java.awt.BorderLayout.SOUTH);
        panControls.add(ColourPreview, java.awt.BorderLayout.CENTER);
        panControls.add(RGBscrollbar, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(panControls, java.awt.BorderLayout.WEST);

        panDrawingArea.setBackground(new java.awt.Color(255, 255, 255));
        panDrawingArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        panDrawingArea.setFocusCycleRoot(true);
        panDrawingArea.setPreferredSize(new java.awt.Dimension(300, 300));

        GameModeLabel.setText("Free Drawing Mode");
        panDrawingArea.add(GameModeLabel);

        getContentPane().add(panDrawingArea, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* rotate the drawing 90 degrees to the left */
    private void btnLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeftActionPerformed
        drawingPanel.rotate(-90);
    }//GEN-LAST:event_btnLeftActionPerformed
    /* clear the drawing */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        drawingPanel.clearDisplay();
    }//GEN-LAST:event_btnClearActionPerformed

    /* change the type of shape to be drawn */
    private void radShapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radShapeActionPerformed
        if (radLine.isSelected()) {
            drawingPanel.setCurrentShapeType(ShapeType.LINE);
            return;
        }
        if (radOval.isSelected()) {
            drawingPanel.setCurrentShapeType(ShapeType.OVAL);
            return;
        }

        if (radTriangle.isSelected()) {
            drawingPanel.setCurrentShapeType(ShapeType.TRIANGLE);
            return;
        }

        if (radQuadrilateral.isSelected()) {
            drawingPanel.setCurrentShapeType(ShapeType.QUADRILATERAL);
            return;
        }
    }//GEN-LAST:event_radShapeActionPerformed
    /* user pressed return in the thickness field */
    private void txtThicknessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtThicknessActionPerformed
        handleThickness();
    }//GEN-LAST:event_txtThicknessActionPerformed
    /* user has clicked away from the thickness field */
    private void txtThicknessFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtThicknessFocusLost
        handleThickness();
    }//GEN-LAST:event_txtThicknessFocusLost
    /* user has types somethinginto thickness field */
    private void txtThicknessKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtThicknessKeyReleased
        handleThickness();
    }//GEN-LAST:event_txtThicknessKeyReleased
    /* rotate the drawing 90 degrees to the right */
    private void btnRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRightActionPerformed
        drawingPanel.rotate(90);
    }//GEN-LAST:event_btnRightActionPerformed

    private void btnLoadXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadXMLActionPerformed
        try {
            XMLShapeReader shapeReader = new XMLShapeReader();

            shapeReader.getShapesFromFile("stored_shapes.xml");
            List listOfShapes = new ArrayList();
            listOfShapes.addAll(XMLShapeReader.getSlList());
            listOfShapes.addAll(XMLShapeReader.getOlList());
            listOfShapes.addAll(XMLShapeReader.getStList());
            listOfShapes.addAll(XMLShapeReader.getQlList());
            drawingPanel.setShapes(listOfShapes);
            drawingPanel.repaint();

        } catch (ParserConfigurationException | SAXException | IOException ex) {
            Logger.getLogger(XMLShapeReader.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnLoadXMLActionPerformed

    private void btnLoadJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadJSONActionPerformed

        try {
            JSONShapeReader shapeReader = new JSONShapeReader();
            shapeReader.getShapesFromFile("stored_shapes.json");
            List listOfShapes = new ArrayList();
            listOfShapes.addAll(JSONShapeReader.getSlList());
            listOfShapes.addAll(JSONShapeReader.getOlList());
            listOfShapes.addAll(JSONShapeReader.getStList());
            listOfShapes.addAll(JSONShapeReader.getQlList());
            drawingPanel.setShapes(listOfShapes);
            drawingPanel.repaint();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DrawerMain.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnLoadJSONActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        drawingPanel.clearDisplay();
        RGBscrollbar.setRGB(0, 0, 0);
        RGBscrollbar.setBrightness(0);
        txtThickness.setText("5");
    }//GEN-LAST:event_btnResetActionPerformed

    private void GravityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GravityButtonActionPerformed
        Thread Gravity = new AnimationThread(drawingPanel, true);
        Gravity.start();
        GameModeLabel.setText("Gravity Animation Mode");
    }//GEN-LAST:event_GravityButtonActionPerformed

    private void RunGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunGameActionPerformed
        Thread game = new GameThread(drawingPanel, true);
        game.start();
        GameModeLabel.setText("Falling Shape Game Mode");
    }//GEN-LAST:event_RunGameActionPerformed

    /* action whatever change has been made to the line thickness */
    private void handleThickness() {
        try {
            int thickness = Integer.parseInt(txtThickness.getText());
            /* only allow thicknesses in the range 1 to 40 */
            thickness = thickness < 1 || thickness > 40 ? 5 : thickness;
            drawingPanel.setCurrentThickness(thickness);
        } catch (NumberFormatException ex) { //If the thickness isn't valid, just set it to the default
            int thickness = 5;
            drawingPanel.setCurrentThickness(thickness);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new DrawerMain().setVisible(true);
        running = true;
        Thread t = new RGBscrollbarPreviewThread();
        t.start();
    }

    public static void UpdateColour(int[] RGB) {
        drawingPanel.setCurrentColor(new Color(RGB[0], RGB[1], RGB[2]));
        ColourPreview.setRGB(RGB[0], RGB[1], RGB[2]);
        drawingPanel.setCurrentBrightness(RGBscrollbar.getBrightness());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static creatingRGBColourPreview.RGBColourPreview ColourPreview;
    public static javax.swing.JLabel GameModeLabel;
    private javax.swing.JButton GravityButton;
    private static CreatingRGBscrollbar.RGBscrollbar RGBscrollbar;
    private javax.swing.JButton RunGame;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnLeft;
    private javax.swing.JButton btnLoadJSON;
    private javax.swing.JButton btnLoadXML;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnRight;
    private javax.swing.ButtonGroup grpShape;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel panButtons;
    private javax.swing.JPanel panControls;
    private javax.swing.JPanel panDrawingArea;
    private javax.swing.JPanel panLoad;
    private javax.swing.JPanel panMoreControls;
    private javax.swing.JPanel panRotate;
    private javax.swing.JPanel panShape;
    private javax.swing.JPanel panThickness;
    private javax.swing.JRadioButton radLine;
    private javax.swing.JRadioButton radOval;
    private javax.swing.JRadioButton radQuadrilateral;
    private javax.swing.JRadioButton radTriangle;
    private javax.swing.JTextField txtThickness;
    // End of variables declaration//GEN-END:variables
}
